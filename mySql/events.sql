-- USE sql_invoicing;
-- DELIMITER $$
-- CREATE TRIGGER payment_after_delete
-- 	BEFORE DELETE ON payments
--     FOR EACH ROW
-- BEGIN
-- 	UPDATE invoices
--     SET payment_total=payment_total-OLD.amount
--     WHERE invoice_id=OLD.invoice_id;
--     
-- END$$

-- DELIMITER ;

-- DELETE FROM payments 
-- WHERE payment_id=last_insert_id();



--  TRIGGER PRACTISE
-- DROP TRIGGER IF EXISTS TRIGGER_NAME;
-- DELIMITER $$
-- CREATE TRIGGER TRIGGER_NAME
-- 	AFTER INSERT ON PAYMENTS
--     FOR EACH ROW
-- BEGIN
-- 	SELECT * FROM RANDOM_TABLE;
-- END$$



-- PROCEDURE PRACTISE
-- DROP PROCEDURE IF EXISTS PROCEDURE_NAME;
-- DELIMITER $$
-- CREATE PROCEDURE PROCEDURE_NAME()
-- BEGIN
-- 	DECLARE VAR1 INT;
--     DECLARE VAR2 VARCHAR(2);
--     DECLARE VAR3 DATE;
--     
--     
--     SELECT AMOUNT_VALUE FROM TABLE_NAME
--     INTO VAR1;
--     
--     SET VAR2=VAR1+342;
--     SET VAR3=VAR2+32432;
--     
--     SELECT VAR1,VAR2,VAR3;
-- END$$


-- VIEW PRACTISE
-- DROP TRIGGER IF EXISTS TRIGGER_NAMES;
-- DELIMIETER $$
-- CREATE TRIGGER TRIGGER_NAMES
-- 	-- AFTER INSERT ON TABLE_NAMES
--     -- AFTER DELETE ON TABLE_NAMES
--     -- BEFORE INSERT ON TABLE_NAMES;
--     BEFORE DELETE ON TABLE_NAMES
--     FOR EACH ROW
-- BEGIN
-- 	UPDATE TABLE_TO_UPDATE
--     SET COL1='SDF'
--     WHERE ID=NEW.ID OR ID=OLD.ID;
--     -- WHERE ID =OLD.ID
-- END$$


-- PRACTISE VIEW 
-- CREATE OR REPLACE VIEW  SAMPLE_VIEW AS
-- 	SELECT *
-- 	FROM TABLE_NAMES
--     -- WRITING A VIEW IS EASY LIKE JUST WITH THAT ONE LINE
--     -- WE KEEP ON WRITING THE BASIC SQL STATEMENTS



